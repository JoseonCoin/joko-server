name: Deploy to Main

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Make application-dev.yml
        run: |
          touch ./src/main/resources/application-dev.yml
          echo "$PROPERTIES_DEV" > ./src/main/resources/application-dev.yml
        env:
          PROPERTIES_DEV: ${{ secrets.PROPERTIES_DEV }}

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: pjmlove08/joko-server

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build & push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}

      - name: create remote directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USER_DEV }}
          key: ${{ secrets.KEY_DEV }}
          script: mkdir -p ./dev

      - name: copy source via ssh key
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr --delete
          remote_path: ./dev
          remote_host: ${{ secrets.HOST_DEV }}
          remote_user: ${{ secrets.USER_DEV }}
          remote_key: ${{ secrets.KEY_DEV }}

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USER_DEV }}
          key: ${{ secrets.KEY_DEV }}
          script: |
            # Stop and remove existing application containers (but keep data containers)
            sudo docker stop backend-server 2>/dev/null || true
            sudo docker rm backend-server 2>/dev/null || true
            sudo docker rmi pjmlove08/joko-server:main 2>/dev/null || true
            
            # Create directories for data persistence
            mkdir -p ~/mysql-data
            mkdir -p ~/redis-data
            
            # Create Docker network
            docker network create joko-network 2>/dev/null || true
            
            # Run MySQL container (only if not already running)
            if [ ! "$(docker ps -q -f name=mysql-server)" ]; then
              docker run -d --name mysql-server \
                --network joko-network \
                -p 3306:3306 \
                -e MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
                -e MYSQL_DATABASE="joko" \
                -v ~/mysql-data:/var/lib/mysql \
                --restart unless-stopped \
                mysql:8.0
            fi
            
            # Run Redis container (only if not already running)
            if [ ! "$(docker ps -q -f name=redis-server)" ]; then
              docker run -d --name redis-server \
                --network joko-network \
                -p 6379:6379 \
                -v ~/redis-data:/data \
                --restart unless-stopped \
                redis:7-alpine
            fi
            
            # Wait for MySQL to be ready (only if it was just started)
            if [ ! "$(docker ps -q -f name=mysql-server -f status=running)" ]; then
              echo "Waiting for MySQL to be ready..."
              sleep 30
            fi
            
            # Pull and run application container
            docker pull pjmlove08/joko-server:main
            docker run -d --name backend-server \
              --network joko-network \
              -p 8080:8080 \
              --restart unless-stopped \
              -e JWT_PREFIX="${{ secrets.JWT_PREFIX }}" \
              -e JWT_REFRESH_EXP="${{ secrets.JWT_REFRESH_EXP }}" \
              -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              -e MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
              -e MYSQL_URL="jdbc:mysql://mysql-server:3306/joko" \
              -e MYSQL_USER="${{ secrets.MYSQL_USER }}" \
              -e REDIS_HOST="redis-server" \
              -e REDIS_PORT="6379" \
              pjmlove08/joko-server:main